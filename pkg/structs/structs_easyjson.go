// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package structs

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs(in *jlexer.Lexer, out *Responce) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs(out *jwriter.Writer, in Responce) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Responce) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Responce) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Responce) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Responce) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs(l, v)
}
func easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs1(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "receiver":
			out.Receiver = string(in.String())
		case "alerts":
			if in.IsNull() {
				in.Skip()
				out.Alerts = nil
			} else {
				in.Delim('[')
				if out.Alerts == nil {
					if !in.IsDelim(']') {
						out.Alerts = make([]Alert, 0, 1)
					} else {
						out.Alerts = []Alert{}
					}
				} else {
					out.Alerts = (out.Alerts)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Alert
					(v1).UnmarshalEasyJSON(in)
					out.Alerts = append(out.Alerts, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs1(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"receiver\":"
		out.RawString(prefix[1:])
		out.String(string(in.Receiver))
	}
	{
		const prefix string = ",\"alerts\":"
		out.RawString(prefix)
		if in.Alerts == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Alerts {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs1(l, v)
}
func easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs2(in *jlexer.Lexer, out *Label) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "alertname":
			out.Alertname = string(in.String())
		case "instance":
			out.Instance = string(in.String())
		case "job":
			out.Job = string(in.String())
		case "monitor":
			out.Monitor = string(in.String())
		case "severity":
			out.Severity = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs2(out *jwriter.Writer, in Label) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"alertname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Alertname))
	}
	{
		const prefix string = ",\"instance\":"
		out.RawString(prefix)
		out.String(string(in.Instance))
	}
	{
		const prefix string = ",\"job\":"
		out.RawString(prefix)
		out.String(string(in.Job))
	}
	{
		const prefix string = ",\"monitor\":"
		out.RawString(prefix)
		out.String(string(in.Monitor))
	}
	{
		const prefix string = ",\"severity\":"
		out.RawString(prefix)
		out.String(string(in.Severity))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Label) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Label) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Label) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Label) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs2(l, v)
}
func easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs3(in *jlexer.Lexer, out *Annotation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "summary":
			out.Summary = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs3(out *jwriter.Writer, in Annotation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"summary\":"
		out.RawString(prefix[1:])
		out.String(string(in.Summary))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Annotation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Annotation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Annotation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Annotation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs3(l, v)
}
func easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs4(in *jlexer.Lexer, out *Alert) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "labels":
			(out.Labels).UnmarshalEasyJSON(in)
		case "annotations":
			(out.Annotations).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs4(out *jwriter.Writer, in Alert) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"labels\":"
		out.RawString(prefix)
		(in.Labels).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		(in.Annotations).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Alert) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Alert) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson6a975c40EncodeGithubComSerhio83ShellBotPkgStructs4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Alert) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Alert) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson6a975c40DecodeGithubComSerhio83ShellBotPkgStructs4(l, v)
}
